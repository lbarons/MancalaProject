
/*for (int i = board.full_side; i > 0; --i){
if (pieces_in_hand > 0){
currentside[i] += 1;
pieces_in_hand--;
} //CHANGE THIS LOOP SO WE CAN PRINT BACKWARDS, BUT MOVE FORWARDS
}*/

/*else{ //current player is player 2
board.store2++;
pieces_in_hand--;
if (pieces_in_hand > 0){
currentside = board.determine_side(switchSides(player_num)); //player is now player2
for (int i = board.full_side; i > 0; --i){
if (pieces_in_hand > 0){
currentside[i] += 1;
pieces_in_hand--;
}
}
}

}*/




//HERE NEED CONTINUING ON, BUT NOT INTO OTHER PLAYER'S STORE!!! CAN IT WORK LIKE THIS??
else{

}


void extendedPlayTurn(Board &board, int * currentside, int player_num, int pieces_in_hand){

int num_rotations = pieces_in_hand / 2;
int counter = 0;
while (counter < num_rotations) {

//first side again
if (pieces_in_hand > 0){
currentside = board.determine_side(player_num); //original side
for (int i = 0; i < board.full_side; ++i){
if (pieces_in_hand > 0){
currentside[i] += 1;
pieces_in_hand--;
}
}
}

//first store:
if (pieces_in_hand > 0){
board.store[player_num]++; //DOES IT WORK TO DO IT LIKE THIS??
pieces_in_hand--;
}

//second side again:

if (pieces_in_hand > 0){
currentside = board.determine_side(switchSides(player_num)); //side is now 2

for (int i = 0; i < board.full_side; ++i){
if (pieces_in_hand > 0){
currentside[i] += 1; //or should be board.side1??
pieces_in_hand--;
}
}
}

}
}


/*board.store[player_num]++; //DOES IT WORK TO DO IT LIKE THIS??
pieces_in_hand--;

if (pieces_in_hand > 0){
currentside = board.determine_side(switchSides(player_num)); //side is now 2

for (int i = 0; i < board.full_side; ++i){
if (pieces_in_hand > 0){
currentside[i] += 1; //or should be board.side1??
pieces_in_hand--;
}
}
}

//ADD EXTENDED PLAY TURN HERE
if (pieces_in_hand > 0){
currentside = board.determine_side(player_num); //original side
for (int i = 0; i < board.full_side; ++i){
if (pieces_in_hand > 0){
currentside[i] += 1;
pieces_in_hand--;
}
}
}




/*int *captureSide = board.determine_side(switchSides(side_num)); //this is not doing the right thing
//player_num isnt what we want to use here to determine side
//updated to side_num

board.store[player_num] += captureSide[board.full_side - index - 1];

printBoard(board, players);

captureSide[board.full_side - index - 1] = 0; //empty that space

printBoard(board, players);
*/

//fullside - index - 1

//JUST TO CHECK!
//board.side0[5] = 20;


//extendedPlayTurn(board, currentside, player_num, pieces_in_hand)

}*/



//override cout to print entire board
/*friend ostream& operator<< (ostream& os, const Board &board){
return os <<  board.side1 << endl << board.store1 << "      " << board.store2 << endl << board.side2;
}*/
